#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

##################################################################
# GENERAL SYSTEM SECURITY OPTIONS

# Controls the System Request debugging functionality of the kernel
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core filename.
# Useful for debugging multi-threaded applications.
kernel.core_uses_pid = 1

#Allow for more PIDs
kernel.pid_max = 65535
#kernel.pid_max = 1000000

# Controls the maximum size of a message, in bytes
kernel.msgmnb = 65535

# Controls the default maxmimum size of a mesage queue
kernel.msgmax = 65535

# Restrict core dumps
fs.suid_dumpable = 0

# Hide exposed kernel pointers
kernel.kptr_restrict = 1

# ASLR
kernel.exec-shield = 1
kernel.randomize_va_space = 1


# In rare occasions, it may be beneficial to reboot your server if it runs out of memory.
# This simple solution can avoid you hours of down time. The vm.panic_on_oom=1 line
# enables panic on OOM; the kernel.panic=10 line tells the kernel to reboot ten seconds after panicking.
vm.panic_on_oom = 1
kernel.panic = 10

#kernel.domainname = example.com

# Uncomment the following to stop low-level messages on console
#kernel.printk = 3 4 1 3

# Uncomment the next two lines to enable Spoof protection (reverse-path filter)
# Turn on Source Address Verification in all interfaces to
# prevent some spoofing attacks
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.all.rp_filter=1

# Uncomment the next line to enable TCP/IP SYN cookies
# See http://lwn.net/Articles/277146/
# Note: This may impact IPv6 TCP sessions too
# Block SYN attacks
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 2048
#net.ipv4.tcp_max_syn_backlog = 4096
#net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2

# Disables packet forwarding
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# Do not accept IP source route packets (we are not a router)
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Do not accept ICMP redirects (prevent MITM attacks)
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
# _or_
# Accept ICMP redirects only for gateways listed in our default
# gateway list (enabled by default)
# net.ipv4.conf.all.secure_redirects = 1

# Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Enable IP spoofing protection, turn on source route verification
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Ignore Directed pings
#net.ipv4.icmp_echo_ignore_all = 1

# Don't ignore directed pings
net.ipv4.icmp_echo_ignore_all = 0

# Ignore ICMP broadcast requests
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Enable bad error message Protection
net.ipv4.icmp_ignore_bogus_error_responses = 1

# [IPv6] Number of Router Solicitations to send until assuming no routers are present.
# This is host and not router.
net.ipv6.conf.default.router_solicitations = 0

# Accept Router Preference in RA?
net.ipv6.conf.default.accept_ra_rtr_pref = 0

# Learn prefix information in router advertisement.
net.ipv6.conf.default.accept_ra_pinfo = 0

# Setting controls whether the system will accept Hop Limit settings from a router advertisement.
net.ipv6.conf.default.accept_ra_defrtr = 0

# Router advertisements can cause the system to assign a global unicast address to an interface.
net.ipv6.conf.default.autoconf = 0

# How many neighbor solicitations to send out per address?
net.ipv6.conf.default.dad_transmits = 0

# How many global unicast IPv6 addresses can be assigned to each interface?
net.ipv6.conf.default.max_addresses = 1

# Disable IPv6 if required (IPv6 might cause issues with the Internet connection being slow)
#net.ipv6.conf.all.disable_ipv6 = 1
#net.ipv6.conf.default.disable_ipv6 = 1
#net.ipv6.conf.lo.disable_ipv6 = 1

# Do not auto-configure IPv6
net.ipv6.conf.all.autoconf=0
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.autoconf=0
net.ipv6.conf.default.accept_ra=0

# Allowed local port range
net.ipv4.ip_local_port_range = 16384 65535
#net.ipv4.ip_local_port_range = 2500 65000
#net.ipv4.ip_local_port_range = 1024 65535

# Enable a fix for RFC1337 - time-wait assassination hazards in TCP
net.ipv4.tcp_rfc1337 = 1

#Then when they start spoofing google.com or whatever you won't start block legit stuff
net.netfilter.nf_conntrack_tcp_loose = 0

net.netfilter.nf_conntrack_max = 10000000
net.netfilter.nf_conntrack_tcp_timeout_established = 40

net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 10
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 10
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10


##################################################################
# TUNING NETWORK PERFORMANCE

#net.ipv4.tcp_mem=8388608 8388608 8388608
#net.ipv4.tcp_mem = 50576   64768   98152

# Enable timestamps as defined in RFC1323. Accurate timestamp make TCP congestion control algorithms work better
net.ipv4.tcp_timestamps = 0

# Enable select acknowledgments
net.ipv4.tcp_sack = 0

# For high-bandwidth low-latency networks, use 'htcp' congestion control
# Do a 'modprobe tcp_htcp' first
#net.ipv4.tcp_congestion_control = bbr

# For servers with tcp-heavy workloads, enable 'fq' queue management scheduler (kernel > 3.12)
#net.core.default_qdisc = fq

# Turn on the tcp_window_scaling
net.ipv4.tcp_window_scaling = 1

# Increase the read-buffer space allocatable
net.ipv4.tcp_rmem = 4096 87380 16777216
#net.ipv4.tcp_rmem = 8192 87380 16777216
#net.ipv4.tcp_rmem=4096 524288 104857600
net.ipv4.udp_rmem_min = 16384
net.core.rmem_default=65536
#net.core.rmem_default = 262144
net.core.rmem_max = 16777216
#net.core.rmem_max = 108544
#net.core.rmem_max=104857600

# Increase the write-buffer-space allocatable
net.ipv4.tcp_wmem = 4096 65536 16777216
#net.ipv4.tcp_wmem = 8192 65536 16777216
#net.ipv4.tcp_wmem = 4096 16384 16777216
#net.ipv4.tcp_wmem=4096 524288 104857600
net.ipv4.udp_wmem_min = 16384
net.core.wmem_default=65536
#net.core.wmem_default = 262144
net.core.wmem_max = 16777216
#net.core.wmem_max = 108544
#net.core.wmem_max=104857600

# Increase number of incoming connections
net.core.somaxconn = 32768
#net.core.somaxconn=262144
#net.core.somaxconn = 2048

# Increase number of incoming connections backlog
net.core.netdev_max_backlog = 16384
#net.core.netdev_max_backlog=30000
#net.core.netdev_max_backlog=2500
#net.core.netdev_max_backlog=262144
net.core.dev_weight = 64

# Increase the maximum amount of option memory buffers
net.core.optmem_max = 65535

# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
net.ipv4.tcp_max_tw_buckets = 1440000

# Try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1

# Limit number of orphans, each orphan can eat up to 16M (max wmem) of unswappable memory
net.ipv4.tcp_max_orphans = 16384
#net.ipv4.tcp_max_orphans = 262144
#net.ipv4.tcp_max_orphans = 8192
net.ipv4.tcp_orphan_retries = 0
#net.ipv4.tcp_orphan_retries = 1

# Increase the maximum memory used to reassemble IP fragments
net.ipv4.ipfrag_high_thresh = 512000
net.ipv4.ipfrag_low_thresh = 446464

# don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Increase size of RPC datagram queue length
net.unix.max_dgram_qlen = 50

# Don't allow the arp table to become bigger than this
net.ipv4.neigh.default.gc_thresh3 = 2048
#net.ipv4.neigh.default.gc_thresh3 = 16384

# Tell the gc when to become aggressive with arp table cleaning.
# Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
net.ipv4.neigh.default.gc_thresh2 = 1024
#net.ipv4.neigh.default.gc_thresh2 = 8192

# Adjust where the gc will leave arp table alone - set to 32.
net.ipv4.neigh.default.gc_thresh1 = 32
#net.ipv4.neigh.default.gc_thresh1 = 4096

# Adjust to arp table gc to clean-up more often
net.ipv4.neigh.default.gc_interval = 30
#net.ipv4.neigh.default.gc_interval = 5

net.ipv4.neigh.default.base_reachable_time = 120
net.ipv4.neigh.default.gc_stale_time = 120
net.ipv4.neigh.default.base_reachable_time = 120
net.ipv4.neigh.default.gc_stale_time = 120

# Increase TCP queue length
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you
net.ipv4.tcp_ecn = 1
net.ipv4.tcp_reordering = 3

# How many times to retry killing an alive TCP connection
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3

# Avoid falling back to slow start after a connection goes idle
# keeps our cwnd large with the keep alive connections (kernel > 3.6)
net.ipv4.tcp_slow_start_after_idle = 0

# Decrease the time default value for tcp_fin_timeout connection
net.ipv4.tcp_fin_timeout = 7
#net.ipv4.tcp_fin_timeout = 25
#net.ipv4.tcp_fin_timeout = 1

# Decrease the time default value for connections to keep alive
net.ipv4.tcp_keepalive_time = 300
net.ipv4.tcp_keepalive_probes = 5
net.ipv4.tcp_keepalive_intvl = 15

# Don't relay bootp
net.ipv4.conf.all.bootp_relay = 0

# Don't proxy arp for anyone
net.ipv4.conf.all.proxy_arp = 0

# Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
net.ipv4.tcp_fastopen = 3

# This will ensure that immediatly subsequent connections use the new values
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1


##################################################################
# IMPROVE SYSTEM MEMORY MANAGEMENT

# Do less swapping
vm.swappiness = 10
vm.dirty_ratio = 30
vm.dirty_background_ratio = 2
vm.vfs_cache_pressure = 50

# Overcommit memory basically allows a process to allocate more virtual memory
# than actually available on the system. Virtual memory is not real, it's just
# a "wild" number, meant to satisfy allocation request needs. In times of
# contention, either swapping will take place or the allocation will fail. By
# allowing your process to overcommit, the fork stopped fail and the save op
# could actually take place.
vm.overcommit_ratio = 100
vm.overcommit_memory=1

vm.min_free_kbytes = 65536
#vm.min_free_kbytes=1048576
#vm.dirty_background_bytes=16777216
#vm.dirty_bytes=50331648

fs.inotify.max_user_watches = 4096
fs.inotify.max_user_instances = 4096

# rphanIncrease size of file handles and inode cache
fs.file-max = 2097152
